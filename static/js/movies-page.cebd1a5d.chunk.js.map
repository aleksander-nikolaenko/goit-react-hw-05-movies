{"version":3,"file":"static/js/movies-page.cebd1a5d.chunk.js","mappings":"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","sources":["components/Container/Container.jsx","components/MoviesList/MoviesListItem/MoviesListItem.jsx","components/MoviesList/MoviesList.jsx","hooks/useFetch.js","components/SearchMovieForm/SearchMovieForm.jsx","pages/MoviesPage/MoviesPage.jsx","services/api.js","services/moviesAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nexport const Container = ({ children }) => {\n  return <Wrapper>{children}</Wrapper>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nconst Wrapper = styled.div`\n  display: grid;\n  grid-template-columns: 1fr;\n  grid-gap: 15px;\n  padding-left: 24px;\n  padding-right: 24px;\n  padding-bottom: 24px;\n`;\n","import PropTypes from 'prop-types';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport noImage from '../../../assets/movie-poster-coming-soon.jpg';\n\nexport const MoviesListItem = ({ id, title, img }) => {\n  const location = useLocation();\n  return (\n    <Item>\n      <Link to={`/movies/${id}`} state={{ prevUrl: location }}>\n        <Wrapper>\n          <Img\n            src={img ? `https://image.tmdb.org/t/p/w500/${img}` : noImage}\n            alt={title}\n          />\n        </Wrapper>\n        <Description>\n          <Title>{title}</Title>\n        </Description>\n      </Link>\n    </Item>\n  );\n};\n\nMoviesListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  title: PropTypes.string.isRequired,\n  img: PropTypes.string,\n};\n\nconst Item = styled.li`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Link = styled(NavLink)`\n  display: flex;\n  flex-direction: column;\n  align-content: stretch;\n\n  border-radius: 4px;\n  text-decoration: none;\n  padding: 10px;\n  background-color: ${p => p.theme.cardBgColor};\n  transition: box-shadow 250ms ease-in-out;\n  &:hover {\n    cursor: pointer;\n    color: ${p => p.theme.accentColor};\n    box-shadow: 0 0 20px 5px rgba(255, 107, 1, 0.251),\n      0 0 15px 3px rgb(255, 107, 1);\n  }\n`;\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 350px;\n  border-radius: 4px;\n  overflow: hidden;\n`;\nconst Img = styled.img`\n  display: block;\n  max-width: 100%;\n  height: auto;\n`;\n\nconst Description = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-grow: 1;\n  height: 60px;\n`;\nconst Title = styled.h3`\n  font-style: normal;\n  font-weight: 700;\n  font-size: 18px;\n  color: ${p => p.theme.cardTitleColor};\n`;\n","import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nexport const MoviesList = ({ children }) => {\n  return <Wrapper>{children}</Wrapper>;\n};\n\nMoviesList.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nconst Wrapper = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n","import { useEffect, useState } from 'react';\n\nexport const useFetch = (requestFn, deps, initialState) => {\n  const [data, setData] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState();\n\n  useEffect(() => {\n    const asyncRequest = async () => {\n      try {\n        setLoading(true);\n        const result = await requestFn();\n        setData(result.data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    asyncRequest();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n\n  return {\n    data,\n    loading,\n    error,\n  };\n};\n","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { BsSearch } from 'react-icons/bs';\nimport styled from 'styled-components';\n\nexport const SearchMovieForm = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleSearchQuery = event => {\n    const searchQuery = event.target.value.trim().toLowerCase();\n\n    setQuery(searchQuery);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSubmit(query);\n\n    setQuery('');\n  };\n\n  return (\n    <Wrapper>\n      <Form>\n        <Button type=\"submit\" onClick={handleSubmit}>\n          <span>\n            <BsSearch size={24} />\n          </span>\n        </Button>\n\n        <Input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          name=\"searchQuery\"\n          placeholder=\"Search movies\"\n          value={query}\n          onChange={handleSearchQuery}\n        />\n      </Form>\n    </Wrapper>\n  );\n};\n\nSearchMovieForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 15px;\n`;\n\nconst Form = styled.form`\n  position: relative;\n`;\nconst Button = styled.button`\n  padding: 5px;\n  font-size: 1.5rem;\n  line-height: 1.5rem;\n  border: none;\n  background-color: initial;\n  position: absolute;\n  right: 0;\n  top: 0;\n  z-index: 3;\n  cursor: pointer;\n  color: ${p => p.theme.inputTextColor};\n  &:hover {\n    color: ${p => p.theme.accentColor};\n  }\n`;\nconst Input = styled.input`\n  width: 400px;\n  height: 32px;\n  padding: 10px;\n  font-size: 21px;\n  border: none;\n  outline: none;\n  color: rgba(249, 249, 249, 0.67);\n  background: ${p => p.theme.inputBgColor};\n  border-radius: 5px;\n`;\n","import { Container } from 'components/Container';\nimport { Loader } from 'components/Loader';\nimport { MoviesList } from 'components/MoviesList';\nimport { MoviesListItem } from 'components/MoviesList/MoviesListItem';\nimport { SearchMovieForm } from 'components/SearchMovieForm';\nimport { useFetch } from 'hooks/useFetch';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { fetchSearchMovies } from 'services/moviesAPI';\n\nconst MoviesPage = () => {\n  let [searchParams, setSearchParams] = useSearchParams();\n\n  let query = searchParams.get('query');\n\n  const handleFormSubmit = searchQuery => {\n    setSearchParams({ query: searchQuery });\n  };\n\n  if (query === null) query = 'war';\n  const { data, loading, error } = useFetch(\n    () => fetchSearchMovies(query),\n    [query],\n    undefined\n  );\n\n  if (loading) return <Loader />;\n  if (error) {\n    toast.error('Sorry, server error, there are no search films', {\n      position: 'top-right',\n      autoClose: 3000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  }\n  if (data?.results.length === 0) {\n    toast.error(\n      'Sorry, there are no films matching your search query. Please try again.',\n      {\n        position: 'top-right',\n        autoClose: 3000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      }\n    );\n  }\n\n  return (\n    <Container>\n      <SearchMovieForm onSubmit={handleFormSubmit} />\n\n      {data && (\n        <MoviesList>\n          {data.results.map(movie => (\n            <MoviesListItem\n              key={movie.id}\n              title={movie.title}\n              id={movie.id}\n              img={movie.poster_path}\n            />\n          ))}\n        </MoviesList>\n      )}\n    </Container>\n  );\n};\n\nexport default MoviesPage;\n","import axios from 'axios';\n\nexport const http = {\n  get(url) {\n    return axios.get(url);\n  },\n  post(url, body) {\n    return axios.post(url, body);\n  },\n};\n","import { http } from './api';\n\nconst API_KEY = 'a4073c3aa9b0e56e387e6992db67c6da';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const fetchTrendingMovies = () => {\n  return http.get(`${BASE_URL}/trending/movie/week?api_key=${API_KEY}`);\n};\n\nexport const fetchSearchMovies = query => {\n  // if (query === '' || query === null) return;\n  return http.get(\n    `${BASE_URL}/search/movie/?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n};\n\nexport const fetchMovieDetails = id => {\n  return http.get(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\n};\n\nexport const fetchMovieReviews = id => {\n  return http.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n};\n\nexport const fetchMovieCast = id => {\n  return http.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n};\n"],"names":["Container","children","Wrapper","styled","MoviesListItem","id","title","img","location","useLocation","Item","Link","to","state","prevUrl","Img","src","noImage","alt","Description","Title","NavLink","p","theme","cardBgColor","accentColor","cardTitleColor","MoviesList","useFetch","requestFn","deps","initialState","useState","data","setData","loading","setLoading","error","setError","useEffect","asyncRequest","result","SearchMovieForm","onSubmit","query","setQuery","Form","Button","type","onClick","event","preventDefault","size","Input","autoComplete","autoFocus","name","placeholder","value","onChange","searchQuery","target","trim","toLowerCase","inputTextColor","inputBgColor","useSearchParams","searchParams","setSearchParams","get","fetchSearchMovies","undefined","Loader","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","results","length","map","movie","poster_path","http","url","axios","API_KEY","BASE_URL","fetchTrendingMovies","fetchMovieDetails","fetchMovieReviews","fetchMovieCast"],"sourceRoot":""}